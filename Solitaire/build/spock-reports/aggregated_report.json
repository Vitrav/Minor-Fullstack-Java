{"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":1,"skipped":0,"totalRuns":12,"successRate":0.16666666666666666,"time":149}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":128}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":50}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":9}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":146}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":6}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":8}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":35}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":38}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":1,"skipped":0,"totalRuns":12,"successRate":0.16666666666666666,"time":144}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":142}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":48}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":9}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":155}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":8}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":19}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":54}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":39}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"successRate":1.0,"time":69}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":16,"successRate":0.5,"time":263}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":16,"successRate":1.0,"time":93}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":65}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":150}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":83}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":160}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":100}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.25,"time":175}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":163}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":123}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":71}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":118}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":224}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":260}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":264}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":1,"successRate":1.0,"time":113}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.5,"time":218}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":127}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":154}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.75,"time":127}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":4,"successRate":1.0,"time":92}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":178}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":45595}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":191}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":168}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":294}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":9399}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.6666666666666666,"time":5630}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":3,"successRate":1.0,"time":92}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":1,"successRate":0.0,"time":210}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":155}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.2857142857142857,"time":714}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.5714285714285714,"time":828}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":120}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":216}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":108}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.7272727272727273,"time":205}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.7272727272727273,"time":220}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.7272727272727273,"time":212}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.8181818181818182,"time":197}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.8181818181818182,"time":207}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":175}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.8181818181818182,"time":186}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.8181818181818182,"time":145}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":11,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.0,"time":287}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":10,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.09090909090909091,"time":34306}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":176}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"successRate":1.0,"time":119}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":137}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":93}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":239}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":194}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":18508}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":8311}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":165}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":21098}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":200}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":194}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":47230}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":252}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":10,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.09090909090909091,"time":312}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.18181818181818182,"time":260}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.18181818181818182,"time":268}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":10,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.09090909090909091,"time":290}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":207}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":199}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.9090909090909091,"time":252}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":10,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.09090909090909091,"time":273}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.2727272727272727,"time":262}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":8,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.2727272727272727,"time":261}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"successRate":1.0,"time":89}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":115}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.7142857142857143,"time":116}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":140}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":19266}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":54408}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":222}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.8571428571428571,"time":15797}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":7,"successRate":1.0,"time":94}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":11,"successRate":1.0,"time":103}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.0,"time":89}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":9,"errors":1,"skipped":0,"totalRuns":12,"successRate":0.16666666666666666,"time":159}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":99}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":49}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":9}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":108}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":6}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":5}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":22}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":40}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.0,"time":292}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":0,"skipped":0,"totalRuns":4,"successRate":0.0,"time":378}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.25,"time":245}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":32}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":30}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":457}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":15}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":12}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":9}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":131}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":117}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.25,"time":261}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":53}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":36}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":350}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":21}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":15}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":2,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.0,"time":14}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":237}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":91}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.25,"time":211}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":41}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":22}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":282}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":18}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":16}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.5,"time":13}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":158}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.5454545454545454,"time":100}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.25,"time":237}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":70}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":38}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":258}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":5}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":15}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.5,"time":7}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":261}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.36363636363636365,"time":83}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":4,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.25,"time":205}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":67}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":25}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":356}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":10}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":12}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.5,"time":6}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":259}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.5454545454545454,"time":89}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.375,"time":203}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":41}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":21}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":354}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":10}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":59}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.5,"time":7}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":266}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.5454545454545454,"time":92}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.375,"time":232}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":48}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":25}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":354}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":7}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":17}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.5,"time":6}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":229}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.5454545454545454,"time":97}},"nl.quintor.solitaire.ui.cli.GameStateParserSpec":{"executedFeatures":["PadNAdd should add padding with testcase : #testCase","cardStringOrNull should return #expectedResult when testing : #testCase","parseGameState should return a string representation of the game state for a new game","printRow should return #expectedResult when testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":3,"errors":2,"skipped":0,"totalRuns":8,"successRate":0.375,"time":198}},"nl.quintor.solitaire.game.moves.RevertMoveSpec":{"executedFeatures":["Given a game with multiple moves played last move can be reverted","Given a game with one move played move can be reverted","Given a game with zero move played cycle one time, cycle can be reverted","Given a waste with one card cycle count is resetted and cards are back to waste","Revert move should throw MoveException when no previous moves have been played"],"ignoredFeatures":[],"stats":{"failures":1,"errors":4,"skipped":0,"totalRuns":5,"successRate":0.0,"time":42}},"nl.quintor.solitaire.game.moves.MoveCardSpec":{"executedFeatures":["[INITIALIZATION ERROR] Given a invalid move: #move game state is not changed when testing: #testCase","[INITIALIZATION ERROR] Given a valid move #move gamestate is changed testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":0,"errors":2,"skipped":0,"totalRuns":2,"successRate":0.0,"time":19}},"nl.quintor.solitaire.game.moves.CycleStockSpec":{"executedFeatures":["Given a stock having: #stock and a waste having: #waste cycling #cyclingTimes times should result in stock having: #resultingStock\n         waste having: #resultingWaste and cycle count of #cycleCount","Testing Cycle with empty stock and waste","Testing Cycle with empty waste","Testing Cycle with empty waste and multiple cards in stock"],"ignoredFeatures":[],"stats":{"failures":7,"errors":0,"skipped":0,"totalRuns":7,"successRate":0.0,"time":208}},"nl.quintor.solitaire.game.moves.QuitMoveSpec":{"executedFeatures":["Quit toString method should return \"Q\u0332uit\"","When quit move is called move return \"Game over\" and gamestate.gameLost is true"],"ignoredFeatures":[],"stats":{"failures":0,"errors":0,"skipped":0,"totalRuns":2,"successRate":1.0,"time":37}},"nl.quintor.solitaire.game.moves.DummyMoveSpec":{"executedFeatures":["Dummy move should throw #exception.getSimpleName() with message #exceptionMessage given a player input of #playerInput","Dummy toString method should return \"Dummy\""],"ignoredFeatures":[],"stats":{"failures":3,"errors":0,"skipped":0,"totalRuns":3,"successRate":0.0,"time":48}},"nl.quintor.solitaire.game.moves.HelpMoveSpec":{"executedFeatures":["Help move should return help text","Help move toString should return 'H\u0332elp'"],"ignoredFeatures":[],"stats":{"failures":1,"errors":0,"skipped":0,"totalRuns":2,"successRate":0.5,"time":5}},"nl.quintor.solitaire.game.CardMoveChecksSpec":{"executedFeatures":["Calling deckLevelChecks with same source and destination will throw exception","Given #card redSuit should return #expectedResult","Given a #joker redSuit should throw a exception","Given the cards #cardLeft, #cardRight the method opposingCards will return #expectedResult","Invalid input calling cardLevelCheck will throw exception with message #exceptionMessage testing: #testCase","Invalid input calling checkPlayerInput whith #input will throw #exception.getSimpleName() with message |#message| when testing: #testcase","Invalid input calling deckLevelChecks will throw exception with message: |#exceptionMessage| testing: #testcase","Valid input calling cardLevelChecks will not throw exceptions testing : #testCase","Valid input calling deckLevelChecks will not throw exception testing: #testcase","Valid moves will not throw exceptions testing: #testcase","valid input calling deckLevelChecks does not throw exceptions testing: #testCase"],"ignoredFeatures":[],"stats":{"failures":22,"errors":0,"skipped":0,"totalRuns":57,"successRate":0.6140350877192983,"time":126}},"nl.quintor.solitaire.game.GameStateControllerSpec":{"executedFeatures":["A bonus should be given of #expectedTimeScore when testing: #testCase","A penalty should be applied of #expectedPenalty based on a game duration of #duration","Win detection should return #expectedResult when testing: #testCase","init should create a valid game state"],"ignoredFeatures":[],"stats":{"failures":5,"errors":0,"skipped":0,"totalRuns":11,"successRate":0.5454545454545454,"time":61}}}